#!/bin/bash
#
# /etc/init.d/medavant-server -- startup script for the MedSavant Server engine
#
# chkconfig: - 90 10
#
### BEGIN INIT INFO
# Provides:          medsavant-server
# Required-Start:    $local_fs $remote_fs $network mysqld-ib
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start MedSavant.
# Description:       Start the MedSavant Server engine.
### END INIT INFO

# Source LSB function library.
if [ -r /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
else
    exit 1
fi

NAME=medsavant-server
DESC="MedSavant server engine"
MEDSAVANT_HOME=/usr/local/medsavant-server-${project.version}
CONFIG=/etc/sysconfig/$NAME
LOGFILE=/var/log/$NAME

if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi

# Read default settings from the configuration file
if [ -r "$CONFIG" ]; then
    . "$CONFIG"
fi

# Run MEDSAVANT as this user ID and group ID
MEDSAVANT_USER=${MEDSAVANT_USER:-medsavant}
MEDSAVANT_GROUP=${MEDSAVANT_GROUP:-medsavant}

# Default Java options
if [ -z "$JAVA_OPTS" ]; then
    JAVA_OPTS="-Djava.awt.headless=true -Djava.net.preferIPv4Stack=true -Xmx4G -XX:MaxPermSize=128M"
fi

# Define other required variables
PROC_PID="/var/run/$NAME.pid"

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser -s /bin/sh"
else
    SU="/bin/su -s /bin/sh"
fi

RETVAL="0"

# See how we were called.
function start() {
    # Check if the server is already running
    checkpidfile
    if [ "$RETVAL" -eq "0" ]; then
        log_success_msg "(already running)"
        return 0;
    else
        RETVAL="0"
    fi

    echo -n "Starting ${DESC}: "

    # Escape any double quotes in the value of JAVA_OPTS
    JAVA_OPTS="$(echo $JAVA_OPTS | sed 's/\"/\\\"/g')"

    touch $LOGFILE
    chown $MEDSAVANT_USER $LOGFILE

    # Run MedSavant as a daemon
    set +e
    touch "$PROC_PID" 2>&1 || { log_failure_msg "Failed to create PID file in $PROC_PID" && exit 4 ; }
    chown $MEDSAVANT_USER:$MEDSAVANT_GROUP "$PROC_PID"

    cd "$MEDSAVANT_HOME"
    runuser -s /bin/bash -g $MEDSAVANT_GROUP $MEDSAVANT_USER \
        -c "{ `which java` $JAVA_OPTS -jar medsavant-server-${project.version}.jar -c /var/lib/medsavant-server/medsavant.properties 1>$LOGFILE 2>&1 & } ; echo \$! > $PROC_PID" || RETVAL="4"

    # Wait 10 seconds to check if the process is stable
    sleep 10
    checkpidfile

    if [ "$RETVAL" -eq "0" ]; then
        log_success_msg
    else
        log_failure_msg "Error code ${RETVAL}"
    fi
}

function stop() {
    echo -n "Stopping ${NAME}: "

    checkpidfile
    if [ ! "$RETVAL" -eq "0" ]; then
        log_success_msg "(not running)"
        rm -f "$PROC_PID"
        RETVAL="0"
        return
    fi

    if [ -f "${PROC_PID}" ]; then
        count="0"
        read kpid < ${PROC_PID}
        kill $kpid
        until [ "$(ps --pid $kpid | grep -c $kpid)" -eq "0" ] || [ "$count" -gt "10" ]; do
            sleep 1
            let count="${count}+1"
        done
        if [ "$count" -gt "10" ]; then
            if [ "$SHUTDOWN_VERBOSE" = "true" ]; then
                log_warning_msg "killing processes which did not stop after ${SHUTDOWN_WAIT} seconds"
            fi
            kill -9 $kpid
        fi
        rm -f "$PROC_PID"
        log_success_msg
    else
        log_success_msg "(not running)"
        RETVAL="0"
    fi
}

function status()
{
    checkpidfile
    if [ "$RETVAL" -eq "0" ]; then
        log_success_msg "${NAME} (pid ${kpid}) is running..."
    elif [ "$RETVAL" -eq "1" ]; then
        log_failure_msg "PID file exists, but process is not running"
    else
        pid="$(pgrep -u $MEDSAVANT_USER -n -f medsavant-server-${project.version}.jar)"
        if [ -z "$pid" ]; then
            log_success_msg "${NAME} is stopped"
            RETVAL="3"
        else
            log_success_msg "${NAME} (pid $pid) is running..."
            RETVAL="0"
        fi
    fi
}

function checkpidfile()
{
    if [ -f "${PROC_PID}" ]; then
        read kpid < ${PROC_PID}
        if [[ "`pgrep -u $MEDSAVANT_USER -n -f medsavant-server-${project.version}.jar`" == "$kpid" ]]; then
            # The pid file exists and the process is running
            RETVAL="0"
            return
        else
            # The pid file exists but the process is not running
            RETVAL="1"
            return
        fi
    fi
    # The pid file does not exist and program is not running
    RETVAL="3"
}

function usage()
{
    echo "Usage: $0 {start|stop|restart|condrestart|try-restart|reload|force-reload|status}"
    RETVAL="2"
}

# See how we were called.
RETVAL="0"
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    condrestart|try-restart)
        if [ -f "/var/run/${NAME}.pid" ]; then
            stop
            start
        fi
        ;;
    reload)
        RETVAL="3"
        ;;
    force-reload)
        if [ -f "/var/run/${NAME}.pid" ]; then
            stop
            start
        fi
        ;;
    status)
        status
        ;;
    *)
      usage
      ;;
esac

exit $RETVAL
